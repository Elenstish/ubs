$(document).ready(function(){$('a[href^="#"]').bind("click.smoothscroll",function(e){e.preventDefault();var t=this.hash,i=$(t);$("html, body").stop().animate({scrollTop:i.offset().top},900,"swing",function(){window.location.hash=t})}),$(".responsive").slick({infinite:!0,slidesToShow:3,slidesToScroll:1,arrows:!0,dots:!1,autoplay:!0,autoplaySpeed:2e3,responsive:[{breakpoint:992,settings:{slidesToShow:2,slidesToScroll:1,centerMode:!1,initialSlide:0}},{breakpoint:768,settings:{slidesToShow:1,slidesToScroll:1,centerMode:!1,initialSlide:0}}]}),$(document).on("click",'[data-toggle="lightbox"]',function(e){e.preventDefault(),$(this).ekkoLightbox()})}),document.addEventListener("DOMContentLoaded",function(){var t=void 0,e=document.querySelector("#map"),i={center:{lat:47.785054,lng:35.212481},zoom:16,styles:[{featureType:"administrative",elementType:"all",stylers:[{saturation:"-100"}]},{featureType:"administrative.province",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"landscape",elementType:"all",stylers:[{saturation:-100},{lightness:65},{visibility:"on"}]},{featureType:"poi",elementType:"all",stylers:[{saturation:-100},{lightness:"50"},{visibility:"simplified"}]},{featureType:"road",elementType:"all",stylers:[{saturation:"-100"}]},{featureType:"road.highway",elementType:"all",stylers:[{visibility:"simplified"}]},{featureType:"road.arterial",elementType:"all",stylers:[{lightness:"30"}]},{featureType:"road.local",elementType:"all",stylers:[{lightness:"40"}]},{featureType:"transit",elementType:"all",stylers:[{saturation:-100},{visibility:"simplified"}]},{featureType:"water",elementType:"geometry",stylers:[{hue:"#ffff00"},{lightness:-25},{saturation:-97}]},{featureType:"water",elementType:"labels",stylers:[{lightness:-25},{saturation:-100}]}],disableDefaultUI:!0,scrollwheel:!1};t=new google.maps.Map(e,i),new google.maps.Marker({position:{lat:47.785054,lng:35.212481},map:t,icon:"img/pointer.png"}),google.maps.event.addDomListener(window,"resize",function(){var e=t.getCenter();google.maps.event.trigger(t,"resize"),t.setCenter(e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
